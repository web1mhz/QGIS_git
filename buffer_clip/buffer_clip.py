# -*- coding: utf-8 -*-
"""
/***************************************************************************
 BufferClip
                                 A QGIS plugin
 this is buffer clip
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-04-19
        git sha              : $Format:%H$
        copyright            : (C) 2019 by npri
        email                : web1mhz@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QFileDialog, QMessageBox
# QGIS 핵심기능 추가
from qgis.core import *
from osgeo import gdal

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .buffer_clip_dialog import BufferClipDialog
import os.path


class BufferClip:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'BufferClip_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # 1. 대화상자 생성 및 참조
        # self.dlg = BufferClipDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Buffer Clip')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('BufferClip', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/buffer_clip/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Buffer Clip'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def msg(self, text):
        msg = QMessageBox()
        # msg.setIcon(QMessageBox.Critical)
        # msg.setText("Error")
        msg.setInformativeText('사용자 버튼:' + text)
        msg.setWindowTitle("확인")
        msg.exec_()

    def loadvectors(self):
        self.dlg.cb_inVector.clear()
        layers = [layer for layer in QgsProject.instance().mapLayers().values()]
        vector_layers = []
        for layer in layers:
            if layer.type() == QgsMapLayer.VectorLayer:
                vector_layers.append(layer.name())
        self.dlg.cb_inVector.addItems(vector_layers)

    def loadrasters(self):
        self.dlg.cb_inRaster.clear()
        layers = [layer for layer in QgsProject.instance().mapLayers().values()]
        raster_layers = []
        for layer in layers:
            if layer.type() == QgsMapLayer.RasterLayer:
                raster_layers.append(layer.name())
        self.dlg.cb_inRaster.addItems(raster_layers)

    def openvector(self):
        infile = str(QFileDialog.getOpenFileName(self.dlg, caption='Open shape file', filter="Shapefiles (*.shp)")[0])
        if infile:
            self.iface.addVectorLayer(infile, str.split(os.path.basename(infile), ".")[0], "ogr")
            self.loadvectors()


    def openraster(self):
        infile = str(QFileDialog.getOpenFileName(caption='Open raster file', filter="GeoTiff (*.tif)")[0])
        if infile:
            self.iface.addRasterLayer(infile, str.split(os.path.basename(infile), ".")[0])
            self.loadrasters()

    def savevector(self):
        outfile = str(QFileDialog.getSaveFileName(self.dlg, caption='Open shape file', filter="Shapefiles (*.shp)")[0])
        self.setlinevector(outfile)
        # self.msg(outfile)

    def saveraster(self):
        # self.msg('하하하')
        outfile = str(QFileDialog.getSaveFileName(caption='Open raster file', filter="GeoTiff (*.tif)")[0])
        self.setlineraster(outfile)

    def setlinevector(self, text):
        self.dlg.le_outVector.setText(text)

    def setlineraster(self, text):
        self.dlg.le_outRaster.setText(text)

    def getVectorLayer(self):
        layer = None
        layername = self.dlg.cb_inVector.currentText()
        # self.msg(layername)
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer

    def getRasterLayer(self):
        layer = None
        layername = self.dlg.cb_inRaster.currentText()
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == layername:
                layer = lyr
                break
        return layer

    def setvariabes(self):

        self.inVector = self.getVectorLayer()
        self.inRaster = self.getRasterLayer()
        self.BufferDist = self.dlg.spin_buffer.value()
        self.outBuffer = self.dlg.le_outVector.text()
        self.outClipedRaster = self.dlg.le_outRaster.text()
        # self.msg(self.outClipedRaster)

    def buffer(self):
        fields = self.inVector.fields()
        writer = QgsVectorFileWriter(self.outBuffer, "EUC-KR", fields, QgsWkbTypes.Polygon,
                                     self.inVector.sourceCrs(),
                                     "ESRI Shapefile")

        # if writer:
        #     self.msg("Writer 성공")

        features = self.inVector.getFeatures()
        for feature in features:
            geom = feature.geometry()
            buffer = geom.buffer(self.BufferDist, 5)
            feature.setGeometry(buffer)
            writer.addFeature(feature)
        del writer

    def clip(self):
        """래스터를 원하는 크기로 자르기 """

        warpOptions = gdal.WarpOptions(format="GTiff", cutlineDSName=self.outBuffer,
                                       cropToCutline=True, dstNodata=-9999.0)
        gdal.Warp(self.outClipedRaster, self.inRaster.dataProvider().dataSourceUri(), options=warpOptions)


    def addLayers(self):

        if self.outBuffer:
            self.iface.addVectorLayer(self.outBuffer, str.split(os.path.basename(self.outBuffer), ".")[0], "ogr")
        if self.outClipedRaster:
            self.iface.addRasterLayer(self.outClipedRaster, str.split(os.path.basename(self.outClipedRaster), ".")[0])
        pass



    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Buffer Clip'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False

            # 1. 초기 플러그인이 생성되고 대화상자 참조하는 코드
            self.dlg = BufferClipDialog()

            # 2. 대화상장에서 사용자 입력버튼과 실행함수 연결할 수 있는 코드
            self.dlg.tb_inVector.clicked.connect(self.openvector)
            self.dlg.tb_inRaster.clicked.connect(self.openraster)
            self.dlg.tb_outVector.clicked.connect(self.savevector)
            self.dlg.tb_outRaster.clicked.connect(self.saveraster)

        # self.dlg = BufferClipDialog()

        # show the dialog
        self.dlg.show()


        # 파일 리프레싱 기능
        self.loadvectors()
        self.loadrasters()

        # Run the dialog event loop
        result = self.dlg.exec_()

        # See if OK was pressed
        if result:
            self.setvariabes()
            self.buffer()
            self.clip()
            self.addLayers()

